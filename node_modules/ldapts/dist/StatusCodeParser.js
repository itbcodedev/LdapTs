"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resultCodeErrors_1 = require("./errors/resultCodeErrors");
class StatusCodeParser {
    static parse(code) {
        switch (code) {
            case 1:
                return new resultCodeErrors_1.OperationsError();
            case 2:
                return new resultCodeErrors_1.ProtocolError();
            case 3:
                return new resultCodeErrors_1.TimeLimitExceededError();
            case 4:
                return new resultCodeErrors_1.SizeLimitExceededError();
            case 7:
                return new resultCodeErrors_1.AuthMethodNotSupportedError();
            case 8:
                return new resultCodeErrors_1.StrongAuthRequiredError();
            case 11:
                return new resultCodeErrors_1.AdminLimitExceededError();
            case 12:
                return new resultCodeErrors_1.UnavailableCriticalExtensionError();
            case 13:
                return new resultCodeErrors_1.ConfidentialityRequiredError();
            case 16:
                return new resultCodeErrors_1.NoSuchAttributeError();
            case 17:
                return new resultCodeErrors_1.UndefinedTypeError();
            case 18:
                return new resultCodeErrors_1.InappropriateMatchingError();
            case 19:
                return new resultCodeErrors_1.ConstraintViolationError();
            case 20:
                return new resultCodeErrors_1.TypeOrValueExistsError();
            case 21:
                return new resultCodeErrors_1.InvalidSyntaxError();
            case 32:
                return new resultCodeErrors_1.NoSuchObjectError();
            case 33:
                return new resultCodeErrors_1.AliasProblemError();
            case 34:
                return new resultCodeErrors_1.InvalidDNSyntaxError();
            case 35:
                return new resultCodeErrors_1.IsLeafError();
            case 36:
                return new resultCodeErrors_1.AliasDerefProblemError();
            case 48:
                return new resultCodeErrors_1.InappropriateAuthError();
            case 49:
                return new resultCodeErrors_1.InvalidCredentialsError();
            case 50:
                return new resultCodeErrors_1.InsufficientAccessError();
            case 51:
                return new resultCodeErrors_1.BusyError();
            case 52:
                return new resultCodeErrors_1.UnavailableError();
            case 53:
                return new resultCodeErrors_1.UnwillingToPerformError();
            case 54:
                return new resultCodeErrors_1.LoopDetectError();
            case 64:
                return new resultCodeErrors_1.NamingViolationError();
            case 65:
                return new resultCodeErrors_1.ObjectClassViolationError();
            case 66:
                return new resultCodeErrors_1.NotAllowedOnNonLeafError();
            case 67:
                return new resultCodeErrors_1.NotAllowedOnRDNError();
            case 68:
                return new resultCodeErrors_1.AlreadyExistsError();
            case 69:
                return new resultCodeErrors_1.NoObjectClassModsError();
            case 70:
                return new resultCodeErrors_1.ResultsTooLargeError();
            case 71:
                return new resultCodeErrors_1.AffectsMultipleDSAsError();
            case 112:
                return new resultCodeErrors_1.TLSNotSupportedError();
            default:
                return new resultCodeErrors_1.UnknownStatusCodeError(code);
        }
    }
}
exports.StatusCodeParser = StatusCodeParser;
//# sourceMappingURL=StatusCodeParser.js.map