/// <reference types="node" />
import * as tls from 'tls';
import { Attribute } from './Attribute';
import { Change } from './Change';
import { Control } from './controls/Control';
import { Filter } from './filters/Filter';
import { Entry } from './messages';
export interface ClientOptions {
    /**
     * A valid LDAP URL (proto/host/port only)
     */
    url: string;
    /**
     * Milliseconds client should let operations live for before timing out (Default: no timeout)
     */
    timeout?: number;
    /**
     * Milliseconds client should wait before timing out on TCP connections
     */
    connectTimeout?: number;
    /**
     * Additional options passed to TLS connection layer when connecting via ldaps://
     */
    tlsOptions?: tls.TlsOptions;
    /**
     * Force strict DN parsing for client methods (Default: true)
     */
    strictDN?: boolean;
}
export interface SearchPageOptions {
    pageSize?: number;
}
export interface SearchOptions {
    scope?: 'base' | 'one' | 'sub' | 'children';
    derefAliases?: 'never' | 'always' | 'search' | 'find';
    returnAttributeValues?: boolean;
    sizeLimit?: number;
    timeLimit?: number;
    paged?: SearchPageOptions | boolean;
    filter?: string | Filter;
    attributes?: string[];
}
export interface SearchResult {
    searchEntries: Entry[];
    searchReferences: string[];
}
export declare class Client {
    private clientOptions;
    private messageId;
    private readonly host;
    private readonly port;
    private readonly secure;
    private connected;
    private socket;
    private connectTimer;
    private readonly messageParser;
    private readonly messageDetailsByMessageId;
    constructor(options: ClientOptions);
    /**
     * Performs a simple authentication against the server.
     * @param {string} dn
     * @param {string} [password]
     * @param {Control|Control[]} [controls]
     */
    bind(dn: string, password?: string, controls?: Control | Control[]): Promise<void>;
    /**
     * Used to create a new entry in the directory
     * @param {string} dn - DN of the entry to add
     * @param {Attribute[]|Object} attributes - Array of attributes or object where keys are the name of each attribute
     * @param {Control|Control[]} [controls]
     */
    add(dn: string, attributes: Attribute[] | {
        [index: string]: string | string[];
    }, controls?: Control | Control[]): Promise<void>;
    /**
     * Compares an attribute/value pair with an entry on the LDAP server.
     * @param {string} dn - The DN of the entry to compare attributes with
     * @param {string} attribute
     * @param {string} value
     * @param {Control|Control[]} [controls]
     */
    compare(dn: string, attribute: string, value: string, controls?: Control | Control[]): Promise<boolean>;
    /**
     * Deletes an entry from the LDAP server.
     * @param {string} dn - The DN of the entry to delete
     * @param {Control|Control[]} [controls]
     */
    del(dn: string, controls?: Control | Control[]): Promise<void>;
    /**
     * Performs an extended operation on the LDAP server.
     * @param {string} oid - The object identifier (OID) of the extended operation to perform
     * @param {string} [value]
     * @param {Control|Control[]} [controls]
     */
    exop(oid: string, value?: string, controls?: Control | Control[]): Promise<{
        oid: string | undefined;
        value: string | undefined;
    }>;
    /**
     * Performs an LDAP modify against the server.
     * @param {string} dn - The DN of the entry to modify
     * @param {Change|Change[]} changes
     * @param {Control|Control[]} [controls]
     */
    modify(dn: string, changes: Change | Change[], controls?: Control | Control[]): Promise<void>;
    /**
     * Performs an LDAP modifyDN against the server.
     * @param {string} dn - The DN of the entry to modify
     * @param {string} newDN - The new DN to move this entry to
     * @param {Control|Control[]} [controls]
     */
    modifyDN(dn: string, newDN: string, controls?: Control | Control[]): Promise<void>;
    /**
     * Performs an LDAP search against the server.
     *
     * @param {string} baseDN - The DN in the tree to start searching at
     * @param {SearchOptions} options
     * @param {Control|Control[]} [controls]
     */
    search(baseDN: string, options?: SearchOptions, controls?: Control | Control[]): Promise<SearchResult>;
    /**
     * Unbinds this client from the LDAP server.
     * @returns {void|Promise} void if not connected; otherwise returns a promise to the request to disconnect
     */
    unbind(): Promise<void>;
    private _sendSearch;
    private _nextMessageId;
    /**
     * Open the socket connection
     * @returns {Promise<void>}
     * @private
     */
    private _connect;
    private _onConnect;
    /**
     * Sends request message to the ldap server over the connected socket.
     * Each message request is given a unique id (messageId), used to identify the associated response when it is sent back over the socket.
     * @returns {Promise<Message>}
     * @private
     */
    private _send;
    private _handleSendResponse;
}
